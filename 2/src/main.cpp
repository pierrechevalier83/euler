/*
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/
#include <cstdint>
#include <iostream>
#include <range/v3/view.hpp>

bool is_even(int n) { return n % 2 == 0; }

int64_t add_if_even(int64_t sum, int64_t n) {
  return is_even(n) ? sum + n : sum;
}

int64_t sum_of_even_fibonacci_numbers(int64_t up_to) {
  int64_t last_fib = 0, fib = 1;
  auto sum = add_if_even(last_fib, fib);
  while (fib < up_to) {
    auto next_fib = last_fib + fib;
    last_fib = fib;
    fib = next_fib;
    sum = add_if_even(sum, fib);
  }
  return sum;
}

int main() {
  std::cout << sum_of_even_fibonacci_numbers(4000000) << '\n';
}